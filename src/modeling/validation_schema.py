import pandas as pd
from sklearn.model_selection import TimeSeriesSplit
from src.modeling.utils import write_to_json


class ValidationSchema:
    """
    Class for defining validation schema for time series data.
    """

    def __init__(self, data: str | pd.DataFrame) -> None:
        """
        **Initialize the ValidationSchema object.**

        :param data: Either a path to a CSV file containing the data or a DataFrame containing the data.
        """
        if isinstance(data, str):
            self.final_data: pd.DataFrame = pd.read_csv(data)
        else:
            self.final_data: pd.DataFrame = data

    def train_test_spliter(self, train_size: int = 32) -> dict:
        """
        **Split the data into train and test sets using a fixed train size.**

        :param train_size: The size of the training set. Default is 32.
        :return: A dictionary containing validation and test indexes, and the validation type.
        """

        test_data = self.final_data['date_block_num'].max()

        # Define validation_data as a list containing dictionaries with train and val indexes
        validation_data = [
            {'train': list(self.final_data['date_block_num'][(self.final_data['date_block_num'] != test_data) & (
                    self.final_data['date_block_num'] <= train_size)].unique()),
             'val': list(self.final_data['date_block_num'][(self.final_data['date_block_num'] != test_data) & (
                     self.final_data['date_block_num'] > train_size)].unique())}
        ]

        write_to_json(key="training_type", value='full')

        return {'validation_indexes': validation_data, 'test_indexes': [test_data], 'validation_type': 'full'}

    def cv_spliter(self, max_train_size: int = 12) -> dict:
        """
        **Split the data into train and validation sets using TimeSeriesSplit cross-validation.**

        :param max_train_size: Maximum size of the training set for each fold. Default is 12.
        :return: A dictionary containing validation and test indexes, and the validation type.
        """

        test_data = self.final_data['date_block_num'].max()

        to_train = self.final_data[self.final_data['date_block_num'] <= (test_data - 1)]

        # Initialize TimeSeriesSplit with the specified parameters
        tscv = TimeSeriesSplit(n_splits=-2 * max_train_size + 46, max_train_size=max_train_size, test_size=1, gap=0)

        # Define validation_data using the split generated by TimeSeriesSplit
        validation_data = [{'train': train_indexes, 'val': val_indexes} for train_indexes, val_indexes in
                           tscv.split(to_train['date_block_num'].unique())]

        write_to_json(key="training_type", value='cv')

        return {'validation_indexes': validation_data, 'test_indexes': [test_data], 'validation_type': 'cv'}
